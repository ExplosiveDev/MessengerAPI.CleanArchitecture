// <auto-generated />
using System;
using Messenger.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messenger.DataAccess.Migrations
{
    [DbContext(typeof(MessengerStoreDBcontext))]
    partial class MessengerStoreDBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Messenger.DataAccess.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChatEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.ConnectionEntity", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("stingConnection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserChatEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            ChatId = new Guid("a2872c6e-2e30-4566-9ab4-1515be72b7c5")
                        },
                        new
                        {
                            UserId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            ChatId = new Guid("a2872c6e-2e30-4566-9ab4-1515be72b7c5")
                        },
                        new
                        {
                            UserId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            ChatId = new Guid("53d3f541-fa16-47f6-9e95-1e1cba92419e")
                        },
                        new
                        {
                            UserId = new Guid("f9a74d03-b637-4787-bdf2-930eff19c944"),
                            ChatId = new Guid("53d3f541-fa16-47f6-9e95-1e1cba92419e")
                        },
                        new
                        {
                            UserId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            ChatId = new Guid("e99beb51-6653-4079-aa32-0d896ea309ff")
                        },
                        new
                        {
                            UserId = new Guid("46028997-952e-4f9c-9282-4ebd7526ea9c"),
                            ChatId = new Guid("e99beb51-6653-4079-aa32-0d896ea309ff")
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380964674274",
                            UserName = "Vlad Gromovij"
                        },
                        new
                        {
                            Id = new Guid("f9a74d03-b637-4787-bdf2-930eff19c944"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380963554053",
                            UserName = "Saller"
                        },
                        new
                        {
                            Id = new Guid("46028997-952e-4f9c-9282-4ebd7526ea9c"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380961111111",
                            UserName = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380962222222",
                            UserName = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("3d021081-200f-4164-8fd8-db52e9d5e10a"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380963333333",
                            UserName = "Alice Johnson"
                        },
                        new
                        {
                            Id = new Guid("50ed1795-2ccb-4bfe-b5bc-8862b760e1aa"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380964444444",
                            UserName = "Bob Brown"
                        },
                        new
                        {
                            Id = new Guid("09e6fa45-b641-40e7-a35b-ea83f9d02522"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380965555555",
                            UserName = "Charlie Davis"
                        },
                        new
                        {
                            Id = new Guid("40d0836c-5f95-4fb2-ba38-7b5ae8ef33d2"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380966666666",
                            UserName = "David Evans"
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.GroupChatEntity", b =>
                {
                    b.HasBaseType("Messenger.DataAccess.Entities.ChatEntity");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AdminId");

                    b.HasDiscriminator().HasValue("GroupChatEntity");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.PrivateChatEntity", b =>
                {
                    b.HasBaseType("Messenger.DataAccess.Entities.ChatEntity");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.HasDiscriminator().HasValue("PrivateChatEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2872c6e-2e30-4566-9ab4-1515be72b7c5"),
                            User1Id = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            User2Id = new Guid("57322de4-860d-4c50-950a-0e88f87d096c")
                        },
                        new
                        {
                            Id = new Guid("53d3f541-fa16-47f6-9e95-1e1cba92419e"),
                            User1Id = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            User2Id = new Guid("f9a74d03-b637-4787-bdf2-930eff19c944")
                        },
                        new
                        {
                            Id = new Guid("e99beb51-6653-4079-aa32-0d896ea309ff"),
                            User1Id = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            User2Id = new Guid("46028997-952e-4f9c-9282-4ebd7526ea9c")
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.MessageEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserChatEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.ChatEntity", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.GroupChatEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.PrivateChatEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.ChatEntity", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
