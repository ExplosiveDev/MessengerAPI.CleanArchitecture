// <auto-generated />
using System;
using Messenger.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messenger.DataAccess.Migrations
{
    [DbContext(typeof(ProductStoreDBcontext))]
    [Migration("20240911173547_seedMessages")]
    partial class seedMessages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatEntityMessageEntity", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "MessagesId");

                    b.HasIndex("MessagesId");

                    b.ToTable("ChatEntityMessageEntity");
                });

            modelBuilder.Entity("ChatEntityUserEntity", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChatEntityUserEntity");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.ConnectionEntity", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("stingConnection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ef67504-47b1-4845-9f82-7b6a9fb4a9c8"),
                            Content = "Hello, how are you?",
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8844)
                        },
                        new
                        {
                            Id = new Guid("1e4e73c2-a504-4712-90fa-d6e8e6d52ff8"),
                            Content = "I'm good, thanks!",
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8856)
                        },
                        new
                        {
                            Id = new Guid("9b78db7c-edbe-4dbe-8dee-d8bb3ea5da6f"),
                            Content = "What's new?",
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8859)
                        },
                        new
                        {
                            Id = new Guid("75fe4719-48b8-42ab-933d-b3f6bf579b9d"),
                            Content = "Not much, just working on a project.",
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8861)
                        },
                        new
                        {
                            Id = new Guid("2b22fbc4-6301-4db3-9949-14cdd5a38dbb"),
                            Content = "Sounds interesting, tell me more!",
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8864)
                        },
                        new
                        {
                            Id = new Guid("d3902c3e-6bdf-4da9-9e6f-09b4a3218e61"),
                            Content = "It's a web app with a real-time chat feature.",
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8867)
                        },
                        new
                        {
                            Id = new Guid("5ba7dd78-8f92-4813-b769-4e659d6f2eb2"),
                            Content = "Cool! What stack are you using?",
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8869)
                        },
                        new
                        {
                            Id = new Guid("11345435-d057-43ad-b53e-77adc98576aa"),
                            Content = "I'm using ASP.NET Core for the backend and React for the frontend.",
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8872)
                        },
                        new
                        {
                            Id = new Guid("3721ad3c-133b-43fd-9e2b-920f350ec83e"),
                            Content = "Nice choice! Let me know if you need help.",
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8878)
                        },
                        new
                        {
                            Id = new Guid("2ddf1249-8109-49a5-af72-3d821357cd9a"),
                            Content = "Thanks! I'll keep that in mind.",
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 9, 11, 17, 35, 46, 937, DateTimeKind.Utc).AddTicks(8880)
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380964674274",
                            UserName = "Vlad Gromovij"
                        },
                        new
                        {
                            Id = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380963554053",
                            UserName = "Saller"
                        },
                        new
                        {
                            Id = new Guid("dc9fc5a8-bde2-4174-a38d-16c928a76628"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380961111111",
                            UserName = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("8deba114-fef7-401b-8280-b46101234bd3"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380962222222",
                            UserName = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("9f853e95-39fe-4628-a6c1-97244d1f218e"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380963333333",
                            UserName = "Alice Johnson"
                        },
                        new
                        {
                            Id = new Guid("a629cd1a-7dc6-4416-980e-117f14b5785e"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380964444444",
                            UserName = "Bob Brown"
                        },
                        new
                        {
                            Id = new Guid("3657040b-cc63-47d7-a01f-9433854cb056"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380965555555",
                            UserName = "Charlie Davis"
                        },
                        new
                        {
                            Id = new Guid("9d8f6531-0856-43d1-ae37-cb20ae9a6494"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380966666666",
                            UserName = "David Evans"
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("ChatEntityMessageEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.ChatEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.MessageEntity", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatEntityUserEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.ChatEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.MessageEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
