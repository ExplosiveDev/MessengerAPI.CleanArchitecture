// <auto-generated />
using System;
using Messenger.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messenger.DataAccess.Migrations
{
    [DbContext(typeof(ProductStoreDBcontext))]
    [Migration("20241105153837_add-receiverId-into-messageEntity")]
    partial class addreceiverIdintomessageEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatEntityMessageEntity", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "MessagesId");

                    b.HasIndex("MessagesId");

                    b.ToTable("ChatEntityMessageEntity");
                });

            modelBuilder.Entity("ChatEntityUserEntity", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChatEntityUserEntity");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.ConnectionEntity", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("stingConnection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ed321e-f1ba-433a-a6f9-e594e34f0676"),
                            Content = "Hello, how are you?",
                            ReceiverId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4268)
                        },
                        new
                        {
                            Id = new Guid("e25666e9-949c-45bd-92cc-af88d214eafc"),
                            Content = "I'm good, thanks!",
                            ReceiverId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4279)
                        },
                        new
                        {
                            Id = new Guid("c9f4c247-ab10-4a07-acde-3bb3d1f74c45"),
                            Content = "What's new?",
                            ReceiverId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4308)
                        },
                        new
                        {
                            Id = new Guid("8914c049-26f5-4d29-9168-0c3998d6bf38"),
                            Content = "Not much, just working on a project.",
                            ReceiverId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4311)
                        },
                        new
                        {
                            Id = new Guid("011cbceb-1ba2-461f-9a7e-8a4bc1bce4e4"),
                            Content = "Sounds interesting, tell me more!",
                            ReceiverId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4322)
                        },
                        new
                        {
                            Id = new Guid("7a126025-ba52-4362-bf66-7f4f030cd77a"),
                            Content = "It's a web app with a real-time chat feature.",
                            ReceiverId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4324)
                        },
                        new
                        {
                            Id = new Guid("2a663fbf-5eb6-4ec9-a6e2-306718fc6186"),
                            Content = "Cool! What stack are you using?",
                            ReceiverId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4326)
                        },
                        new
                        {
                            Id = new Guid("90e723a4-da51-458a-9cc6-7c3b6b3045ec"),
                            Content = "I'm using ASP.NET Core for the backend and React for the frontend.",
                            ReceiverId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4328)
                        },
                        new
                        {
                            Id = new Guid("c7f6f77c-5e90-4a93-a443-9efc893c89f9"),
                            Content = "Nice choice! Let me know if you need help.",
                            ReceiverId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            SenderId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4330)
                        },
                        new
                        {
                            Id = new Guid("a009f598-82b5-449c-9a55-fe0d72467d13"),
                            Content = "Thanks! I'll keep that in mind.",
                            ReceiverId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            SenderId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            Timestamp = new DateTime(2024, 11, 5, 15, 38, 36, 839, DateTimeKind.Utc).AddTicks(4332)
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380964674274",
                            UserName = "Vlad Gromovij"
                        },
                        new
                        {
                            Id = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380963554053",
                            UserName = "Saller"
                        },
                        new
                        {
                            Id = new Guid("be268e83-8ed1-46f6-bed5-2b56b54ab30d"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380961111111",
                            UserName = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("1eac84f8-be6b-400d-a654-9fb6c6fbe1c9"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380962222222",
                            UserName = "Jane Smith"
                        },
                        new
                        {
                            Id = new Guid("40f98174-b001-4be8-99c4-a920854ff7f5"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380963333333",
                            UserName = "Alice Johnson"
                        },
                        new
                        {
                            Id = new Guid("15d4249e-966f-46a4-9424-c339aa4b2642"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380964444444",
                            UserName = "Bob Brown"
                        },
                        new
                        {
                            Id = new Guid("667f8602-7f3b-4934-a88a-302516913fdd"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380965555555",
                            UserName = "Charlie Davis"
                        },
                        new
                        {
                            Id = new Guid("7b8023cc-d9b7-484d-b3c9-ac85d0004e09"),
                            PasswordHash = "$2a$11$1m1GjCBPIuOWxIbPWYNMYu8NvAPFkxJLIhr0x26NzVnSA905TAk4a",
                            Phone = "+380966666666",
                            UserName = "David Evans"
                        });
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6c0136a2-48d9-450f-9814-5cba270dce14"),
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("57322de4-860d-4c50-950a-0e88f87d096c"),
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("ChatEntityMessageEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.ChatEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.MessageEntity", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatEntityUserEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.ChatEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.MessageEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("Messenger.DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
