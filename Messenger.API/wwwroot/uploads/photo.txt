import { useState } from "react";
import Chat from "../Models/Chat";
import Message from "../Models/Message";
import User from "../Models/User";
import PrivateChat from "../Models/PrivateChat";
import GroupChat from "../Models/GroupChat";


function useIndexedDBMessenger(dbName: string = "Messenger", version: number = 1) {
  const [db, setDb] = useState<IDBDatabase | null>(null);
  const storeNameMesseges = "Messages"
  const storeNamePrivateChats = "PrivateChats"
  const storeNameGroupChats = "GroupChats"
  const storeNameUsers = "Users"

  const openDb = (): Promise<IDBDatabase> => {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open(dbName, version);

        request.onupgradeneeded = () => {
            console.log("Upgrade needed for IndexedMessengerDB");
            const db = request.result;
            if (!db.objectStoreNames.contains(storeNamePrivateChats)) {
                db.createObjectStore(storeNamePrivateChats, { keyPath: "id" });
                console.log(`Object store "${storeNamePrivateChats}" created.`);
            }
            if (!db.objectStoreNames.contains(storeNameMesseges)) {
                db.createObjectStore(storeNameMesseges, { keyPath: "id" });
                console.log(`Object store "${storeNameMesseges}" created.`);
            }
            if (!db.objectStoreNames.contains(storeNameUsers)) {
              db.createObjectStore(storeNameUsers, { keyPath: "id" });
              console.log(`Object store "${storeNameUsers}" created.`);
          }
        };

        request.onsuccess = () => {
            const database = request.result;
            setDb(database);
            console.log("IndexedMessengerDB opened successfully.");
            resolve(database);
        };

        request.onerror = () => {
            console.error("Failed to open IndexedMessengerDB:", request.error);
            reject(request.error);
        };
    });
};
//------------------------------------------------ Private Chats
  const addPrivateChat = (data: PrivateChat): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (!db) {
          reject("Database is not initialized");
          return;
      }

      const transaction = db.transaction(storeNamePrivateChats, "readwrite");
      const store = transaction.objectStore(storeNamePrivateChats);

      const getRequest = store.get(data.id);

      getRequest.onsuccess = () => {
          if (getRequest.result) {
              reject(`Chat with id ${data.id} already exists.`);
              return;
          }
          
          const addRequest = store.put(data);

          addRequest.onsuccess = () => {
              resolve();
          };

          addRequest.onerror = () => {
              reject(addRequest.error);
          };
      };

      getRequest.onerror = () => {
          reject(getRequest.error);
      };
  });
  };

  const addPrivateChats = (data: PrivateChat[]): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      // Використовуємо Promise.all, щоб зачекати на всі виклики addData
      Promise.all(data.map(item => addPrivateChat(item)))
        .then(() => {
          resolve();
        })
        .catch((error) => {
          reject(error);
        });
    });
  };


  const getPrivateChat = (id: string): Promise<PrivateChat> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      const transaction = db.transaction(storeNamePrivateChats, "readonly");
      const store = transaction.objectStore(storeNamePrivateChats);
      const request = store.get(id);

      request.onsuccess = () => {
        resolve(request.result);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  };
  const getPrivateChats = (): Promise<PrivateChat[]> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      const transaction = db.transaction(storeNamePrivateChats, "readonly");
      const store = transaction.objectStore(storeNamePrivateChats);
      const request = store.getAll();

      request.onsuccess = () => {
        resolve(request.result as PrivateChat[]);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  };

//------------------------------------------------ Group Chats
const addGroupChat = (data: GroupChat): Promise<void> => {
  return new Promise((resolve, reject) => {
    if (!db) {
        reject("Database is not initialized");
        return;
    }

    const transaction = db.transaction(storeNameGroupChats, "readwrite");
    const store = transaction.objectStore(storeNameGroupChats);

    const getRequest = store.get(data.id);

    getRequest.onsuccess = () => {
        if (getRequest.result) {
            reject(`Chat with id ${data.id} already exists.`);
            return;
        }
        
        const addRequest = store.put(data);

        addRequest.onsuccess = () => {
            resolve();
        };

        addRequest.onerror = () => {
            reject(addRequest.error);
        };
    };

    getRequest.onerror = () => {
        reject(getRequest.error);
    };
});
};

const addGroupChats = (data: GroupChat[]): Promise<void> => {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("Database is not initialized");
      return;
    }

    // Використовуємо Promise.all, щоб зачекати на всі виклики addData
    Promise.all(data.map(item => addGroupChat(item)))
      .then(() => {
        resolve();
      })
      .catch((error) => {
        reject(error);
      });
  });
};


const getGroupChat = (id: string): Promise<GroupChat> => {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("Database is not initialized");
      return;
    }

    const transaction = db.transaction(storeNameGroupChats, "readonly");
    const store = transaction.objectStore(storeNameGroupChats);
    const request = store.get(id);

    request.onsuccess = () => {
      resolve(request.result);
    };

    request.onerror = () => {
      reject(request.error);
    };
  });
};
const getGroupChats = (): Promise<GroupChat[]> => {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("Database is not initialized");
      return;
    }

    const transaction = db.transaction(storeNameGroupChats, "readonly");
    const store = transaction.objectStore(storeNameGroupChats);
    const request = store.getAll();

    request.onsuccess = () => {
      resolve(request.result as GroupChat[]);
    };

    request.onerror = () => {
      reject(request.error);
    };
  });
};

  //------------------------------------------------ Messeges
  const addMessage = (data: Message): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (!db) {
          reject("Database is not initialized");
          return;
      }

      const transaction = db.transaction(storeNameMesseges, "readwrite");
      const store = transaction.objectStore(storeNameMesseges);

      const getRequest = store.get(data.id);

      getRequest.onsuccess = () => {
          if (getRequest.result) {
              reject(`Message with id ${data.id} already exists.`);
              return;
          }
          
          const addRequest = store.put(data);

          addRequest.onsuccess = () => {
              resolve();
          };

          addRequest.onerror = () => {
              reject(addRequest.error);
          };
      };

      getRequest.onerror = () => {
          reject(getRequest.error);
      };
  });
  };

  const addMessages = (data: Message[]): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      // Використовуємо Promise.all, щоб зачекати на всі виклики addData
      Promise.all(data.map(item => addMessage(item)))
        .then(() => {
          resolve();
        })
        .catch((error) => {
          reject(error);
        });
    });
  };


  const getMessage = (id: string): Promise<Message> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      const transaction = db.transaction(storeNameMesseges, "readonly");
      const store = transaction.objectStore(storeNameMesseges);
      const request = store.get(id);

      request.onsuccess = () => {
        resolve(request.result);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  };
  const getMessages = (): Promise<Message[]> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      const transaction = db.transaction(storeNameMesseges, "readonly");
      const store = transaction.objectStore(storeNameMesseges);
      const request = store.getAll();

      request.onsuccess = () => {
        resolve(request.result as Message[]);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  };

  
  //------------------------------------------------ Users
  const addUser = (data: User): Promise<void> => {
    return new Promise((resolve, reject) => {
        if (!db) {
            reject("Database is not initialized");
            return;
        }

        const transaction = db.transaction(storeNameUsers, "readwrite");
        const store = transaction.objectStore(storeNameUsers);

        const getRequest = store.get(data.id);

        getRequest.onsuccess = () => {
            if (getRequest.result) {
                reject(`User with id ${data.id} already exists.`);
                return;
            }
            
            const addRequest = store.put(data);

            addRequest.onsuccess = () => {
                resolve();
            };

            addRequest.onerror = () => {
                reject(addRequest.error);
            };
        };

        getRequest.onerror = () => {
            reject(getRequest.error);
        };
    });
};


  const addUsers = (data: User[]): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      // Використовуємо Promise.all, щоб зачекати на всі виклики addData
      Promise.all(data.map(item => addUser(item)))
        .then(() => {
          resolve();
        })
        .catch((error) => {
          reject(error);
        });
    });
  };


  const getUser = (id: string): Promise<User> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      const transaction = db.transaction(storeNameUsers, "readonly");
      const store = transaction.objectStore(storeNameUsers);
      const request = store.get(id);

      request.onsuccess = () => {
        resolve(request.result);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  };
  const getUsers = (): Promise<User[]> => {
    return new Promise((resolve, reject) => {
      if (!db) {
        reject("Database is not initialized");
        return;
      }

      const transaction = db.transaction(storeNameUsers, "readonly");
      const store = transaction.objectStore(storeNameUsers);
      const request = store.getAll();

      request.onsuccess = () => {
        resolve(request.result as User[]);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  };

  return { openDb, 
          addPrivateChat, getPrivateChat, addPrivateChats, getPrivateChats, 
          addGroupChat, getGroupChat, addGroupChats, getGroupChats,
          addMessage, getMessage, addMessages, getMessages,
          addUser, getUser, addUsers, getUsers, 
          db };
}

export default useIndexedDBMessenger;